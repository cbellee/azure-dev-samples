package main

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
)

func helloHandler(w http.ResponseWriter, r *http.Request) {
	for name, values := range r.Header {
		// Loop over all values for the name.
		for _, value := range values {
			fmt.Println(name, value)
		}
	}

	// Write "Hello, world!" to the response body
	io.WriteString(w, "Hello, world!\n")
}

func main() {
	/* certFilePath, exists := os.LookupEnv("CERT_FILE_PATH")
	if !exists {
		certFilePath = "/etc/certs/tls.crt"
	}

	keyFilePath, exists := os.LookupEnv("KEY_FILE_PATH")
	if !exists {
		keyFilePath = "/etc/certs/tls.key"
	}
	*/
	port, exists := os.LookupEnv("PORT")
	if !exists {
		port = "8080"
	}

	// Set up a /hello resource handler
	http.HandleFunc("/hello", helloHandler)

	// Create a CA certificate pool and add cert.pem to it
	/* caCert, err := ioutil.ReadFile(certFilePath)
	if err != nil {
		log.Fatal(err)
	}
	caCertPool := x509.NewCertPool()
	caCertPool.AppendCertsFromPEM(caCert) */

	// Create the TLS Config with the CA pool and enable Client certificate validation
	/* tlsConfig := &tls.Config{
		ClientCAs:  caCertPool,
		ClientAuth: tls.VerifyClientCertIfGiven,
		InsecureSkipVerify: true,
	} */

	// Create a Server instance to listen on port 8443 with the TLS config
	server := &http.Server{
		Addr: ":" + port,
		//TLSConfig: tlsConfig,
	}

	// Listen to HTTPS connections with the server certificate and wait
	// log.Fatal(server.ListenAndServeTLS(certFilePath, keyFilePath))
	log.Default().Print("Go server listening on port " + port)
	err := server.ListenAndServe()
	if err != nil {	
		fmt.Printf("Error starting server: %s\n", err)
		os.Exit(1)
	}
}
